legend.key.height=unit(1, "cm"))
heat4 + labs(y="Crime",x="Time of Day", title='When Do Crimes Take Place?', caption="City of Seattle: Open Data Portal")
#data prep
crimeY2000=crime[(crime$DaysToReport>=365) & (crime$year>=2000),]
crimeY2000$YearsToReport=crimeY2000$DaysToReport/365
crimeYearGG=crimeY2000[complete.cases(crimeY2000$YearsToReport),]
titleText5='How Many Years Does it Take \nfor a Crime to Be Reported?'
#ggplot
base= ggplot(crimeYearGG,
aes(x = reorder(crimecat, YearsToReport, FUN = max), # reorder!
y=YearsToReport))
mins = base + stat_summary(fun.y=min,size=1,
geom="line", linetype='dashed',show.legend = T,
aes(group=1,col='Min'))
minsMaxs= mins + stat_summary(fun.y=max,
geom="line",size=1,show.legend = F,
aes(group=1,col='Max'))
minsMaxsMd= minsMaxs + stat_summary(fun.y=median, size=2,
geom="line",
aes(group=1,col='Median'))
all3=minsMaxsMd + scale_colour_manual(name="Trends",
values=c("blue", "black","red"))
all4 = all3 + coord_flip()
all5 = all4 + labs(title="titleText5",
x ='Type of Crime',
y = 'Years to Report',
caption = "sourceText2")
all5
titleText6= 'How Many Weeks Does it Take \nfor a Crime to Be Reported?'
#ggplot
base = ggplot(crimeYearGG2,
aes(x = reorder(crimecat, WeeksToReport, FUN = max),
y=WeeksToReport))
#data prep
# 1. MEAN of days it takes to report a crime by neighborhood
daysByNeigh=tapply(crime$DaysToReport, crime$Neighborhood, mean,na.rm=T)
daysByNeigh=as.data.frame(daysByNeigh)%>%rownames_to_column()
# 2. PROPORTION of crimes by neighborhood
crimesByNeigh=tapply(crime$crimecat, crime$Neighborhood, length)%>%
prop.table()%>%
"*"(100)%>%
round(2)
crimesByNeigh=as.data.frame(crimesByNeigh)%>%rownames_to_column()
#MERGE
num_num=merge(daysByNeigh,crimesByNeigh) # 'row name' is the "key"
#title
titleText7="Does a Neighborhood's Crime Rates Influence \nHow Long it Takes Residents to Report Crimes?"
#ggplot
base = ggplot(num_num, aes(daysByNeigh,crimesByNeigh,label=rowname))
plot1= base +  geom_point()
plot2=plot1 + geom_text_repel(aes(label=ifelse(crimesByNeigh>=5,
num_num$rowname, "")))
plot3 = plot2 + labs(title=titleText7,
x ='Days to Report',
y = 'Crimes by Neighborhood',
caption = "City of Seattle: Open Data Portal")
plot3
base = ggplot(num_num, aes(daysByNeigh,crimesByNeigh))
scatp1 = base +  geom_hex(bins = 10)
scatp2= scatp1 + geom_text_repel(aes(label=ifelse(crimesByNeigh>=5,
num_num$rowname,
"")))
scatp3=scatp2 + scale_fill_distiller(palette ="Greys",direction=1) # try -1
scatp4 = scatp3 + labs(title=titleText7,
x ='Days to Report',
y = 'Crimes by Neighborhood',
caption = "City of Seattle: Open Data Portal")
scatp4
base = ggplot(num_num, aes(daysByNeigh,crimesByNeigh))
scatp1 = base +  stat_density_2d(aes(fill = ..density..),
geom = "raster", contour = FALSE)
scatp2=scatp1+geom_text_repel(aes(label=ifelse(crimesByNeigh>=5,
num_num$rowname, "")))
scatp3 = scatp2 +  theme(legend.position='none')
scatp4= scatp3 + scale_fill_distiller(palette="Greys", direction=1)
scatp5 = scatp4 +  scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
scatp6 = scatp5 + labs(title=titleText7,
x ='Days to Report',
y = 'Crimes by Neighborhood',
caption = "City of Seattle: Open Data Portal")
scatp6
#data prep
cut=median(safe2$PERSONAL)
#list of the 24 columns
names(mydata2)
base = ggplot(num_num, aes(daysByNeigh,crimesByNeigh))
scatp1 = base +  stat_density_2d(aes(fill = ..density..),
geom = "raster", contour = FALSE)
scatp2=scatp1+geom_text_repel(aes(label=ifelse(crimesByNeigh>=5,
num_num$rowname, "")))
scatp3 = scatp2 +  theme(legend.position='none')
scatp4= scatp3 + scale_fill_distiller(palette="Greys", direction=1)
scatp5 = scatp4 +  scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
scatp6 = scatp5 + labs(title=titleText7,
x ='Days to Report',
y = 'Crimes by Neighborhood',
caption = "City of Seattle: Open Data Portal")
scatp6
base = ggplot(num_num, aes(daysByNeigh,crimesByNeigh))
scatp1 = base +  geom_hex(bins = 10)
scatp2= scatp1 + geom_text_repel(aes(label=ifelse(crimesByNeigh>=5,
num_num$rowname,
"")))
scatp3=scatp2 + scale_fill_distiller(palette ="Greys",direction=1) # try -1
scatp4 = scatp3 + labs(title=titleText7,
x ='Days to Report',
y = 'Crimes by Neighborhood',
caption = "City of Seattle: Open Data Portal")
scatp4
#data prep
crimeY2000=crime[(crime$DaysToReport>=365) & (crime$year>=2000),]
crimeY2000$YearsToReport=crimeY2000$DaysToReport/365
crimeYearGG=crimeY2000[complete.cases(crimeY2000$YearsToReport),]
crimeWeek=crime[(crime$DaysToReport<365) & (crime$year>=2000),]
crimeWeek$WeeksToReport=crimeWeek$DaysToReport/7
crimeYearGG2=crimeWeek[complete.cases(crimeWeek$WeeksToReport) &complete.cases(crimeWeek$crimecat),]
titleText5='How Many Years Does it Take \nfor a Crime to Be Reported?'
#ggplot
base= ggplot(crimeYearGG,
aes(x = reorder(crimecat, YearsToReport, FUN = max), # reorder!
y=YearsToReport))
mins = base + stat_summary(fun.y=min,size=1,
geom="line", linetype='dashed',show.legend = T,
aes(group=1,col='Min'))
minsMaxs= mins + stat_summary(fun.y=max,
geom="line",size=1,show.legend = F,
aes(group=1,col='Max'))
minsMaxsMd= minsMaxs + stat_summary(fun.y=median, size=2,
geom="line",
aes(group=1,col='Median'))
all3=minsMaxsMd + scale_colour_manual(name="Trends",
values=c("blue", "black","red"))
all4 = all3 + coord_flip()
all5 = all4 + labs(title="titleText5",
x ='Type of Crime',
y = 'Years to Report',
caption = "sourceText2")
all5
titleText6= 'How Many Weeks Does it Take \nfor a Crime to Be Reported?'
#ggplot
base = ggplot(crimeYearGG2,
aes(x = reorder(crimecat, WeeksToReport, FUN = max),
y=WeeksToReport))
mins = base + stat_summary(fun.y=min,size=1,
geom="line", linetype='dashed',show.legend = T,
aes(group=1,col='Min'))
minsMaxs= mins + stat_summary(fun.y=max,
geom="line",size=1,show.legend = F,
aes(group=1,col='Max'))
minsMaxsMd= minsMaxs + stat_summary(fun.y=median,size=2,
geom="line",
aes(group=2,col='Median'))
all3=minsMaxsMd + scale_colour_manual(name="Trends",
values=c("blue", "black","red"))
all4=all3+coord_flip()
all5 = all4 + labs(title='titleText6',
x ='Type of Crime',
y = 'Weeks to Report',
caption = 'sourceText2')
all5
#data prep
# 1. MEAN of days it takes to report a crime by neighborhood
daysByNeigh=tapply(crime$DaysToReport, crime$Neighborhood, mean,na.rm=T)
daysByNeigh=as.data.frame(daysByNeigh)%>%rownames_to_column()
# 2. PROPORTION of crimes by neighborhood
crimesByNeigh=tapply(crime$crimecat, crime$Neighborhood, length)%>%
prop.table()%>%
"*"(100)%>%
round(2)
crimesByNeigh=as.data.frame(crimesByNeigh)%>%rownames_to_column()
#MERGE
num_num=merge(daysByNeigh,crimesByNeigh) # 'row name' is the "key"
#title
titleText7="Does a Neighborhood's Crime Rates Influence \nHow Long it Takes Residents to Report Crimes?"
#ggplot
base = ggplot(num_num, aes(daysByNeigh,crimesByNeigh,label=rowname))
plot1= base +  geom_point()
plot2=plot1 + geom_text_repel(aes(label=ifelse(crimesByNeigh>=5,
num_num$rowname, "")))
plot3 = plot2 + labs(title=titleText7,
x ='Days to Report',
y = 'Crimes by Neighborhood',
caption = "City of Seattle: Open Data Portal")
plot3
base = ggplot(num_num, aes(daysByNeigh,crimesByNeigh))
scatp1 = base +  geom_hex(bins = 10)
scatp2= scatp1 + geom_text_repel(aes(label=ifelse(crimesByNeigh>=5,
num_num$rowname,
"")))
scatp3=scatp2 + scale_fill_distiller(palette ="Greys",direction=1) # try -1
scatp4 = scatp3 + labs(title=titleText7,
x ='Days to Report',
y = 'Crimes by Neighborhood',
caption = "City of Seattle: Open Data Portal")
scatp4
base = ggplot(num_num, aes(daysByNeigh,crimesByNeigh))
scatp1 = base +  stat_density_2d(aes(fill = ..density..),
geom = "raster", contour = FALSE)
scatp2=scatp1+geom_text_repel(aes(label=ifelse(crimesByNeigh>=5,
num_num$rowname, "")))
scatp3 = scatp2 +  theme(legend.position='none')
scatp4= scatp3 + scale_fill_distiller(palette="Greys", direction=1)
scatp5 = scatp4 +  scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
scatp6 = scatp5 + labs(title=titleText7,
x ='Days to Report',
y = 'Crimes by Neighborhood',
caption = "City of Seattle: Open Data Portal")
scatp6
#Loading the Data
link = "https://raw.githubusercontent.com/jwhite00/VisualAnalytics_2_tabularData/master/data/Link%20Data.csv"
mydata2=read.csv(link)
#loading ggplot2 and scales plugins
library(ggplot2)
library(scales)
# as a percentage of total
absoluteT=table(mydata2$access,exclude = '#NULL!')
ToPlot=prop.table(absoluteT)
#Making the Title of the Chart
titleText2= 'Did Getting Rid of Secured Bike Lockers Affect \nHow Many People Bike to Light Rail Station?'
titleText3= 'What is preventing a more even distribution of Travel to Stations'
sourceText='Source: Sound Transit 2015 Onboard Survey Data'
# preparing labels
ToPlot1=ToPlot*100
plotLabels=paste0(round(ToPlot1,2),'%')  # labels for the slices
# customizing set of colors
paletteHere=rainbow(length(ToPlot1))
paletteHereNew=c('gray') # just one color
safeCopy=safe
resultPCA=principal(safeCopy[,-1], nfactors = 1, scores=T, normalize=T)
#get the new index
safeCopy$indexSafe=as.vector(factor.scores(safeCopy[,-1],resultPCA)$scores)
#rescale the index # pysch has its own 'rescale'
safeCopy$indexSafe=scales::rescale(safeCopy$indexSafe, to = c(1, 100))
safeCopy$RankSafe=rank(-safeCopy$indexSafe)
# IN/OUT
positionsIN=grep("_In_", colnames(safe) )
positionsOUT=grep("_Out_", colnames(safe) )
#
safeIN=safe[,c(1,positionsIN)]
safeOUT=safe[,c(1,positionsOUT)]
#get the rankings and composite indexes:
### IN
resultIN=principal(safeIN[,-1],
nfactors = 1,
scores=T,
normalize=T)
safeIN$indexSafeIN=as.vector(factor.scores(safeIN[,-1],resultIN)$scores)
safeIN$indexSafeIN=scales::rescale(safeIN$indexSafeIN,
to = c(1, 100))
safeIN$RankSafeIN=rank(-safeIN$indexSafeIN)
### OUT
resultOUT=principal(safeOUT[,-1],
nfactors = 1,
scores=T,
normalize=T)
safeOUT$indexSafeOUT=as.vector(factor.scores(safeOUT[,-1],resultOUT)$scores)
safeOUT$indexSafeOUT=scales::rescale(safeOUT$indexSafeOUT,
to = c(1, 100))
safeOUT$RankSafeOUT=rank(-safeOUT$indexSafeOUT)
#merge the results
safeIO=merge(safeIN,safeOUT)
set.seed(123)
distanceAmong <- dist(safe[,-1]) # euclidean distances between the rows
result <- cmdscale(distanceAmong,eig=TRUE, k=2) # k is the number of dim
# data frame prep:
dim1 <- result$points[,1]
dim2 <- result$points[,2]
coordinates=data.frame(dim1,dim2,city=safe$city)
# computing clusters
result <- kmeans(safeIO[,-c(1,25,26,53,54)], # not using composites just created
centers = 3) # how many clusters
# adding the cluster
safeIO$cluster=as.factor(result$cluster)
levels(safeIO$cluster)[levels(safeIO$cluster)=="1"] <- "High Reward"
levels(safeIO$cluster)[levels(safeIO$cluster)=="2"] <- "Medium Reward"
levels(safeIO$cluster)[levels(safeIO$cluster)=="3"] <- "Low Reward"
#ggplot
base <- ggplot(safeIO, aes(x= indexSafeIN, y= indexSafeOUT, label=city,
color = cluster))
plot1 = base + geom_point(na.rm=TRUE)
plot2 = plot1 + geom_text_repel(na.rm=TRUE,size=2) + labs(title="The Effects of City Spending on Safety", x="City Rank in Safety Spending", y="City Safety Ranking", subtitle = '0-Low Rank, 100-High Rank')
plot2
library(openxlsx)
#load data
link="https://github.com/EvansDataScience/data/raw/master/safeCitiesIndexAll.xlsx"
safe=read.xlsx(link)
link2="https://github.com/EvansDataScience/data/raw/master/safeCitiesIndex.xlsx"
safe2=read.xlsx(link2)
#Descriptive Plugins
library(ggplot2)
library(psych)
library(ggrepel)
#Ineferential Plugins
library(dotwhisker)
library(broom)
library(dplyr)
library(cluster)
safeCopy=safe
resultPCA=principal(safeCopy[,-1], nfactors = 1, scores=T, normalize=T)
#get the new index
safeCopy$indexSafe=as.vector(factor.scores(safeCopy[,-1],resultPCA)$scores)
#rescale the index # pysch has its own 'rescale'
safeCopy$indexSafe=scales::rescale(safeCopy$indexSafe, to = c(1, 100))
safeCopy$RankSafe=rank(-safeCopy$indexSafe)
# IN/OUT
positionsIN=grep("_In_", colnames(safe) )
positionsOUT=grep("_Out_", colnames(safe) )
#
safeIN=safe[,c(1,positionsIN)]
safeOUT=safe[,c(1,positionsOUT)]
#get the rankings and composite indexes:
### IN
resultIN=principal(safeIN[,-1],
nfactors = 1,
scores=T,
normalize=T)
safeIN$indexSafeIN=as.vector(factor.scores(safeIN[,-1],resultIN)$scores)
safeIN$indexSafeIN=scales::rescale(safeIN$indexSafeIN,
to = c(1, 100))
safeIN$RankSafeIN=rank(-safeIN$indexSafeIN)
### OUT
resultOUT=principal(safeOUT[,-1],
nfactors = 1,
scores=T,
normalize=T)
safeOUT$indexSafeOUT=as.vector(factor.scores(safeOUT[,-1],resultOUT)$scores)
safeOUT$indexSafeOUT=scales::rescale(safeOUT$indexSafeOUT,
to = c(1, 100))
safeOUT$RankSafeOUT=rank(-safeOUT$indexSafeOUT)
#merge the results
safeIO=merge(safeIN,safeOUT)
set.seed(123)
distanceAmong <- dist(safe[,-1]) # euclidean distances between the rows
result <- cmdscale(distanceAmong,eig=TRUE, k=2) # k is the number of dim
# data frame prep:
dim1 <- result$points[,1]
dim2 <- result$points[,2]
coordinates=data.frame(dim1,dim2,city=safe$city)
# computing clusters
result <- kmeans(safeIO[,-c(1,25,26,53,54)], # not using composites just created
centers = 3) # how many clusters
# adding the cluster
safeIO$cluster=as.factor(result$cluster)
levels(safeIO$cluster)[levels(safeIO$cluster)=="1"] <- "High Reward"
levels(safeIO$cluster)[levels(safeIO$cluster)=="2"] <- "Medium Reward"
levels(safeIO$cluster)[levels(safeIO$cluster)=="3"] <- "Low Reward"
#ggplot
base <- ggplot(safeIO, aes(x= indexSafeIN, y= indexSafeOUT, label=city,
color = cluster))
plot1 = base + geom_point(na.rm=TRUE)
plot2 = plot1 + geom_text_repel(na.rm=TRUE,size=2) + labs(title="The Effects of City Spending on Safety", x="City Rank in Safety Spending", y="City Safety Ranking", subtitle = '0-Low Rank, 100-High Rank')
plot2
#data prep
cut=median(safe2$PERSONAL)
safe2$PERSONAL_bi=ifelse(safe2$PERSONAL>cut,
1,0)
library(margins)
margins_logit_PERSONAL = margins(logit_PERSONAL)
#data prep
cut=median(safe2$PERSONAL)
safe2$PERSONAL_bi=ifelse(safe2$PERSONAL>cut,
1,0)
library(margins)
logit_PERSONAL = glm(PERSONAL_bi~ .,
data = safe2[,-c(1,5)],
family = "binomial")
margins_logit_PERSONAL = margins(logit_PERSONAL)
marginalSummary=summary(margins_logit_PERSONAL)
digi=cplot(logit_PERSONAL, "HEALTH",draw = F)
#GGPLOT
base = ggplot(digi, aes(x = xvals))
p1= base + geom_ribbon(aes(ymin = lower, ymax = upper),
fill = "grey90")
p2 = p1 + geom_line(aes(y = yvals))
p3= p2 + labs(title="Estimated Effect of City's HEALTH index on PERSONAL index",
x= "HEALTH index", y="Predicted Effect on PERSONAL index")
p3 + theme_bw()
install.packages("classInt")
install.packages("RColorBrewer")
install.packages("leaflet")
install.packages("tmap")
install.packages("rmapshaper")
install.packages("tmaptools")
install.packages("raster")
install.packages("rgdal")
install.packages("utils")
install.packages("utils")
install.packages("utils")
detach("package:utils", unload=TRUE)
library("utils", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:utils", unload=TRUE)
install.packages("classInt")
install.packages ("classInt")
link='https://github.com/EvansDataScience/data/raw/master/contriWA.RData'
#getting the data TABLE from the file in the cloud:
load(file=url(link))
# link to zipped folder
zippedSHP= "https://github.com/EvansDataScience/data/raw/master/WAzips.zip"
# link to zipped folder
zippedSHP= "https://github.com/EvansDataScience/data/raw/master/WAzips.zip"
library(utils)
temp=tempfile()
download.file(zippedSHP, temp)
unzip(temp)
(maps=list.files(pattern = 'shp'))
# notice the parameters use in the chunk!!
library(rgdal)
install.packages("rgdal")
install.packages("rgdal")
# notice the parameters use in the chunk!!
library(rgdal)
wazipMap <- readOGR("SAEP_ZIP_Code_Tabulation_Areas.shp",stringsAsFactors=F)
plot(wazipMap)
plot(wazipMap,
border='blue',#color of lines
col='yellow', #color of polygon
lwd=0.1) #thickness
library(raster)
install.packages("raster")
library(raster)
mapCRS=crs(wazipMap) # projection of our map
contriWA_geo <- SpatialPointsDataFrame(contriWA[,c(10:9)], # Lon/LAT
contriWA,    #the original data frame
proj4string = mapCRS)   # assign a CRS of map
library(tmaptools)
install.packages("tmaptools")
library(tmaptools)
install.packages("tmaptools")
library(tmaptools)
library(tmaptools)
install.packages("tmaptools")
library(tmaptools)
plot(wazipMap,border='blue',col='yellow',lwd=0.1)
# NEW LAYER ON TOP
plot(contriWA_geo,
pch=20, #type of character (see link above)
col = "red",
cex = .6, # shrinking
add=T) # VERY important
library(rmapshaper)
install.packages("rmapshaper")
library(rmapshaper)
plot(contriWA_geo, pch=20, col = "pink", cex = .3)
# add on top
plot(baseMap,border='black',col=NA,lwd=1,add=T)
library(tmap)
install.packages("tmaptools")
library(tmaptools)
library(tmaptools)
install.packages("tmaptools")
library(tmaptools)
str(contriWA,width = 60, strict.width = 'cut')
sort(unique(contriWA$election_year))
names(contriWA_geo)
class(contriWA_geo)
library(tmaptools)
library(tmaptools)
install.packages("tmaptools", dependencies = FALSE)
library(tmaptools)
library(utils)
temp=tempfile()
download.file(zippedSHP, temp)
unzip(temp)
.libPaths()
.libPaths(/Library/Frameworks/R.framework/Versions/3.3/Resources/library)
.rm(list = ls())
link='https://github.com/EvansDataScience/data/raw/master/contriWA.RData'
#getting the data TABLE from the file in the cloud:
load(file=url(link))
# link to zipped folder
zippedSHP= "https://github.com/EvansDataScience/data/raw/master/WAzips.zip"
library(utils)
temp=tempfile()
download.file(zippedSHP, temp)
unzip(temp)
(maps=list.files(pattern = 'shp'))
# notice the parameters use in the chunk!!
library(rgdal)
wazipMap <- readOGR("SAEP_ZIP_Code_Tabulation_Areas.shp",stringsAsFactors=F)
plot(wazipMap)
plot(wazipMap,
border='blue',#color of lines
col='yellow', #color of polygon
lwd=0.1) #thickness
library(raster)
mapCRS=crs(wazipMap) # projection of our map
contriWA_geo <- SpatialPointsDataFrame(contriWA[,c(10:9)], # Lon/LAT
contriWA,    #the original data frame
proj4string = mapCRS)   # assign a CRS of map
library(tmaptools)
install.packages ("tmaptools")
library(tmaptools)
plot(wazipMap,border='blue',col='yellow',lwd=0.1)
# NEW LAYER ON TOP
plot(contriWA_geo,
pch=20, #type of character (see link above)
col = "red",
cex = .6, # shrinking
add=T) # VERY important
names(contriWA_geo)
class(contriWA_geo)
library(tmaptools)
plot(contriWA_geo, pch=20, col = "pink", cex = .3)
# add on top
plot(baseMap,border='black',col=NA,lwd=1,add=T)
library(leaflet)
plot(contriWA_geo, pch=20, col = "pink", cex = .3)
# add on top
plot(baseMap,border='black',col=NA,lwd=1,add=T)
